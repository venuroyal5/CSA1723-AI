import heapq

class PuzzleState:
    def __init__(self, puzzle, parent=None, move=None):
        self.puzzle = puzzle
        self.parent = parent
        self.move = move
        if self.parent:
            self.depth = parent.depth + 1
        else:
            self.depth = 0

    def __lt__(self, other):
        return (self.depth + self.heuristic()) < (other.depth + other.heuristic())

    def __eq__(self, other):
        return self.puzzle == other.puzzle

    def __hash__(self):
        return hash(str(self.puzzle))

    def __str__(self):
        return '\n'.join([' '.join([str(col) for col in row]) for row in self.puzzle])

    def get_blank_position(self):
        for i in range(3):
            for j in range(3):
                if self.puzzle[i][j] == 0:
                    return i, j

    def move_blank(self, direction):
        blank_row, blank_col = self.get_blank_position()
        if direction == 'up':
            new_row = blank_row - 1
            new_col = blank_col
        elif direction == 'down':
            new_row = blank_row + 1
            new_col = blank_col
        elif direction == 'left':
            new_row = blank_row
            new_col = blank_col - 1
        elif direction == 'right':
            new_row = blank_row
            new_col = blank_col + 1
        else:
            raise ValueError("Invalid direction")
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            new_puzzle = [row[:] for row in self.puzzle]
            new_puzzle[blank_row][blank_col], new_puzzle[new_row][new_col] = \
                new_puzzle[new_row][new_col], new_puzzle[blank_row][blank_col]
            return PuzzleState(new_puzzle, self, direction)
        else:
            return None

    def get_children(self):
        children = []
        for direction in ['up', 'down', 'left', 'right']:
            child = self.move_blank(direction)
            if child:
                children.append(child)
        return children

    def is_goal(self):
        return self.puzzle == [[0, 1, 2], [3, 4, 5], [6, 7, 8]]

    def heuristic(self):
        # Manhattan distance heuristic
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.puzzle[i][j] != 0:
                    value = self.puzzle[i][j] - 1
                    target_row = value // 3
                    target_col = value % 3
                    distance += abs(i - target_row) + abs(j - target_col)
        return distance

def solve_puzzle(initial_state):
    open_set = []
    closed_set = set()
    heapq.heappush(open_set, initial_state)

    while open_set:
        current_state = heapq.heappop(open_set)

        if current_state.is_goal():
            return current_state

        closed_set.add(current_state)

        for child in current_state.get_children():
            if child not in closed_set:
                heapq.heappush(open_set, child)

    return None

def print_solution(solution):
    path = []
    while solution:
        path.append(solution)
        solution = solution.parent
    path.reverse()
    for state in path:
        print(state)
        print()

if __name__ == "__main__":
    initial_puzzle = [[1, 2, 3], [4, 5, 6], [0, 7, 8]]  # Example initial state
    initial_state = PuzzleState(initial_puzzle)
    solution = solve_puzzle(initial_state)
    if solution:
        print("Solution found:")
        print_solution(solution)
    else:
        print("No solution found.")
